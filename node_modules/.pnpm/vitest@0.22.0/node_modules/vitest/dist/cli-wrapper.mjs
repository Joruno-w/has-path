import { fileURLToPath } from 'url';
import { p as picocolors } from './vendor-picocolors.807856aa.mjs';
import { e as execa } from './vendor-index.fbec8a81.mjs';
import 'tty';
import 'buffer';
import 'path';
import 'child_process';
import 'process';
import './vendor-index.2ae8040a.mjs';
import './vendor-_commonjsHelpers.4da45ef5.mjs';
import 'fs';
import 'stream';
import 'util';
import 'os';
import './vendor-index.29636037.mjs';
import 'assert';
import 'events';

const ENTRY = new URL("./cli.mjs", import.meta.url);
const NODE_ARGS = ["--inspect", "--inspect-brk", "--trace-deprecation"];
const ERRORS = [
  {
    trigger: "Check failed: result.second.",
    url: "https://github.com/nodejs/node/issues/43617"
  },
  {
    trigger: "FATAL ERROR: v8::FromJust Maybe value is Nothing.",
    url: "https://github.com/vitest-dev/vitest/issues/1191"
  },
  {
    trigger: "FATAL ERROR: v8::ToLocalChecked Empty MaybeLocal.",
    url: "https://github.com/nodejs/node/issues/42407"
  }
];
async function main() {
  var _a;
  const exitCode = 100;
  let retries = 0;
  const args = process.argv.slice(2);
  if (process.env.VITEST_SEGFAULT_RETRY) {
    retries = +process.env.VITEST_SEGFAULT_RETRY;
  } else {
    for (let i = 0; i < args.length; i++) {
      if (args[i].startsWith("--segfault-retry=")) {
        retries = +args[i].split("=")[1];
        break;
      } else if (args[i] === "--segfault-retry" && ((_a = args[i + 1]) == null ? void 0 : _a.match(/^\d+$/))) {
        retries = +args[i + 1];
        break;
      }
    }
  }
  retries = Math.max(1, retries || 1);
  for (let i = 1; i <= retries; i++) {
    if (i !== 1)
      console.log(`${picocolors.exports.inverse(picocolors.exports.bold(picocolors.exports.magenta(" Retrying ")))} vitest ${args.join(" ")} ${picocolors.exports.gray(`(${i} of ${retries})`)}`);
    await start(args);
    if (i === 1 && retries === 1) {
      console.log(picocolors.exports.yellow(`It seems to be an upstream bug of Node.js. To improve the test stability,
you could pass ${picocolors.exports.bold(picocolors.exports.green("--segfault-retry=3"))} or set env ${picocolors.exports.bold(picocolors.exports.green("VITEST_SEGFAULT_RETRY=3"))} to
have Vitest auto retries on flaky segfaults.
`));
    }
  }
  process.exit(exitCode);
}
main();
async function start(args) {
  var _a;
  const nodeArgs = [];
  const vitestArgs = [];
  for (let i = 0; i < args.length; i++) {
    let matched = false;
    for (const nodeArg of NODE_ARGS) {
      if (args[i] === nodeArg || args[i].startsWith(`${nodeArg}=`)) {
        matched = true;
        nodeArgs.push(args[i]);
        break;
      }
    }
    if (!matched)
      vitestArgs.push(args[i]);
  }
  const child = execa("node", [...nodeArgs, fileURLToPath(ENTRY), ...vitestArgs], {
    reject: false,
    stderr: "pipe",
    stdout: "inherit",
    stdin: "inherit"
  });
  (_a = child.stderr) == null ? void 0 : _a.pipe(process.stderr);
  const { stderr = "" } = await child;
  for (const error of ERRORS) {
    if (stderr.includes(error.trigger)) {
      if (process.env.GITHUB_ACTIONS)
        console.log(`::warning:: Segmentfault Error Detected: ${error.trigger}
Refer to ${error.url}`);
      const RED_BLOCK = picocolors.exports.inverse(picocolors.exports.red(" "));
      console.log(`
${picocolors.exports.inverse(picocolors.exports.bold(picocolors.exports.red(" Segmentfault Error Detected ")))}
${RED_BLOCK} ${picocolors.exports.red(error.trigger)}
${RED_BLOCK} ${picocolors.exports.red(`Refer to ${error.url}`)}
`);
      return;
    }
  }
  process.exit(child.exitCode);
}
